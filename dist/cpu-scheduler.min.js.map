{"version":3,"sources":["cpu-scheduler.js"],"names":["$","document","ready","hide","collapse","toggle","algorithm","runningTime","contexSwitch","processArray","timeQuantum","progressBar","setTimeout","position","bar","findSmallestBurstIndex","smallestIndex","smallestBurst","length","i","done","arrivalTime","burstTime","smallestPriority","priority","isDone","names","fillGaps","previousName","indexes","parseFloat","toPrecision","this","sum","addItem","name","progressLength","addToBar","pos","createRuler","console","utilization","Math","sortNames","waitTimes","fullExplanation","displayBar","process","processName","initialBurst","pIndex","finished","log","round","sort","process2","process1","toolTipTitle","newName","sortArriveTimes","finishTime","compareArrivals","waitSum","averageWait","html","Preview","Update","newPriority","hasStarted","index","percent","start","duration","removeClass","interruptFound","append","proccessIndex","findNextJump","addClass","findSmallestPriorityIndex","roundRobin","attr","end","text","css","run","processCount","val","Number","loadValues","FCFS","SRJF","SJF","itemAmount","pow","power","multi","item","ruler","prop","word","j","empty","len","createElement","spacing","width","find","click","on","isNaN","window","resize"],"mappings":"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","file":"cpu-scheduler.min.js","sourcesContent":["$(document).ready(function() {\r\n\r\n\r\n\t$('#explanation-equation').hide();\r\n\r\n\r\n\t$(\".priority\").collapse( {toggle: false });\r\n\r\n\r\n\t//default algorithm is First Come First Served\r\n\tvar algorithm = \"FCFS\";\r\n\r\n\t//used to keep track of how long the CPU has been running as opposed to idle\r\n\tvar runningTime=0;\r\n\r\n\t//the time it takes to switch between processes\r\n\tvar contexSwitch=0;\r\n\r\n\t//array used to store the processes\r\n\tvar processArray = [];\r\n\r\n\t//the time quantum used in Round Robin\r\n\tvar timeQuantum = 2;\r\n\r\n\t//the amount of processes, this is used to load in values into processArray\r\n\tvar processCount=3;\r\n\r\n\t//used to keep track of the position\r\n\tvar position=0;\r\n\r\n\t//things are put into here to display\r\n\tvar bar = new progressBar();\r\n\r\n\t//set up program initially\r\n\trun();\r\n\r\n\tsetTimeout(function(){run()}, 200);\r\n\r\n\r\n\r\n\t//used for debugging\r\n\tfunction printArray(){\r\n\t\tconsole.log(\"Printing array\");\r\n\t\tfor (var i =0; i< processArray.length; i++) {\r\n\t\t\tconsole.log(processArray[i].processName);\r\n\t\t\tconsole.log(processArray[i].burstTime);\r\n\t\t\tconsole.log(processArray[i].arrivalTime);\r\n\t\t};\r\n\t}\r\n\r\n\r\n\t//used for SJF and SRJF, finds the index of the next available smallest job\r\n\tfunction findSmallestBurstIndex(){\r\n\t\tvar smallestIndex=0;\r\n\t\tvar smallestBurst= 0;\r\n\r\n\t\t//finds an initial burst time\r\n\t\tfor (var i =0; i< processArray.length; i++) {\r\n\t\t\tif(processArray[i].done==false && processArray[i].arrivalTime<= position)\r\n\t\t\t{\r\n\t\t\t\tsmallestIndex=i;\r\n\t\t\t\tsmallestBurst=  processArray[i].burstTime;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t//looks through the array to find a smaller burst time\r\n\t\tfor (var i =smallestIndex; i< processArray.length; i++) {\r\n\t\t\tif(processArray[i].burstTime < smallestBurst && processArray[i].done==false && processArray[i].arrivalTime<= position)\r\n\t\t\t{\r\n\t\t\t\tsmallestIndex=i;\r\n\t\t\t\tsmallestBurst=  processArray[i].burstTime;\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\r\n\t\treturn smallestIndex;\r\n\t}\r\n\r\nfunction findSmallestPriorityIndex(){\r\n\t\tvar smallestIndex=0;\r\n\t\tvar smallestPriority= 0;\r\n\r\n\t\t//finds an initial burst time\r\n\t\tfor (var i =0; i< processArray.length; i++) {\r\n\t\t\tif(processArray[i].done==false && processArray[i].arrivalTime<= position)\r\n\t\t\t{\r\n\t\t\t\tsmallestIndex=i;\r\n\t\t\t\tsmallestPriority=  processArray[i].priority;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t//looks through the array to find a smaller burst time\r\n\t\tfor (var i =smallestIndex; i< processArray.length; i++) {\r\n\t\t\tif(processArray[i].priority < smallestPriority && processArray[i].done==false && processArray[i].arrivalTime<= position)\r\n\t\t\t{\r\n\t\t\t\tsmallestIndex=i;\r\n\t\t\t\tsmallestPriority=  processArray[i].priority;\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\r\n\t\treturn smallestIndex;\r\n\t}\r\n\r\n\r\n\r\n\t//checks if all the processes have completed\r\n\tfunction isDone()\r\n\t{\r\n\t\tvar done =true;\r\n\t\tfor (var i =0; i< processArray.length; i++) {\r\n\t\t\tif(processArray[i].done==false)\r\n\t\t\t{\r\n\t\t\t\tdone = false;\r\n\t\t\t\t//console.log(\"not done   i:\"+i);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn done;\r\n\t}\r\n\r\n\r\n\t//inserts idle time if no process is ready to go yet\r\n\tfunction fillGaps(){\r\n\t\tfor (var i =0; i< processArray.length; i++) {\r\n\t\t\tif(processArray[i].done==false)\r\n\t\t\t{\r\n\t\t\t\tif(processArray[i].arrivalTime>position )\r\n\t\t\t\t{\r\n\t\t\t\t\tbar.addItem(\"idle\", processArray[i].arrivalTime-position);\r\n\t\t\t\t\t\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t//used to display the gant chart\r\n\tfunction progressBar(){\r\n\t\tthis.indexes=[];\r\n\t\tthis.names=[];\r\n\t\tthis.sum=0;\r\n\r\n\t\tthis.addItem = function(name, progressLength){\r\n\t\t\tvar previousName=this.names[this.names.length-1];\r\n\r\n\t\t\t//if the process being added is the same as the current one, combine them\r\n\t\t\tif(this.names.length>0 && previousName==name)\r\n\t\t\t{\r\n\t\t\t\tthis.indexes[this.indexes.length-1] += progressLength;\r\n\t\t\t\tthis.sum += progressLength;\r\n\t\t\t\tposition+=progressLength;\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tif(previousName!=\"idle\" && previousName!=\"context switch\" && name!= \"idle\" && position!=0 && contexSwitch >0\r\n\t\t\t\t||name==\"idle\" && progressLength<=contexSwitch && position!=0)\r\n\t\t\t\t{\r\n\t\t\t\t\tthis.indexes[this.indexes.length]=contexSwitch;\r\n\t\t\t\t\tthis.names[this.names.length]=\"context switch\";\r\n\t\t\t\t\tthis.sum += contexSwitch;\r\n\t\t\t\t\tposition+=contexSwitch;\r\n\t\t\t\t\tposition=parseFloat(position.toPrecision(12));\r\n\t\t\t\t}\r\n\t\t\t\tif( (name==\"idle\" && progressLength<=contexSwitch && position!=0 ) ==false)\r\n\t\t\t\t{\r\n\t\t\t\t\tthis.indexes[this.indexes.length]=progressLength;\r\n\t\t\t\t\tthis.names[this.names.length]=name;\r\n\t\t\t\t\tthis.sum += progressLength;\r\n\t\t\t\t\tposition+=progressLength;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tposition=parseFloat(position.toPrecision(12));\r\n\t\t\tthis.sum=parseFloat(this.sum.toPrecision(12));\r\n\r\n\t\t}\r\n\t\t\t\r\n\t\t\r\n\r\n\t\tthis.displayBar = function(){\r\n\t\t\t\r\n\r\n\t\t\tvar pos=0;\r\n\r\n\t\t\tfor(var i=0; i<this.indexes.length;i++)\r\n\t\t\t{\r\n\t\t\t\tconsole.log(\"name:\"+this.names[i]+\"  index:\"+this.indexes[i]);\r\n\t\t\t\tvar length= (this.indexes[i]/this.sum)*100;\r\n\t\t\t\taddToBar(this.names[i],length, pos ,this.indexes[i], i);\r\n\t\t\t\tpos+=this.indexes[i];\r\n\t\t\t\tpos=parseFloat(pos.toPrecision(12));\r\n\t\t\t}\r\n\r\n\t\t\tcreateRuler(this.sum);\r\n\r\n\t\t\tconsole.log(\"sum:\"+this.sum+\"   \"+runningTime);\r\n\r\n\t\t\tvar utilization=  100- ( ( (this.sum- runningTime)/this.sum )*100 ) ;\r\n\t\t\tutilization= Math.round(utilization*100)/100  ;\r\n\r\n\t\t\tsortNames();\r\n\r\n\t\t\tvar waitTimes=[];\r\n\r\n\t\t\twaitTimes[0]=processArray[0].finishTime - processArray[0].arrivalTime - processArray[0].initialBurst;\r\n\t\t\twaitTimes[0]= parseFloat(waitTimes[0].toPrecision(12));\r\n\t\t\tvar fullExplanation='';\r\n\r\n\t\t\tfullExplanation+= '<p class=\"lead\"> CPU utilization: $ '+utilization+'\\\\%   $'+\r\n\t\t\t\t'<br><br>Average Wait Time: <span style=\"font-size:24px\">$ \\\\frac{'+waitTimes[0];\r\n\r\n\t\t\t\tvar waitSum=waitTimes[0];\r\n\r\n\t\t\tfor (var i =1; i< processArray.length; i++) {\r\n\t\t\t\twaitTimes[i]= processArray[i].finishTime - processArray[i].arrivalTime - processArray[i].initialBurst;\r\n\t\t\t\twaitTimes[i]= parseFloat(waitTimes[i].toPrecision(12));\r\n\r\n\t\t\t\tfullExplanation+= '+'+waitTimes[i];\r\n\t\t\t\twaitSum+= waitTimes[i];\r\n\t\t\t}\r\n\r\n\t\t\tvar averageWait= waitSum/processArray.length;\r\n\t\t\taverageWait= Math.round(averageWait*10000)/10000  ;\r\n\r\n\t\t\tfullExplanation+= '}{'+processArray.length+'} $</span> $ = '+averageWait+' $';\r\n\r\n\t\t\t//set the equation text\r\n\t\t\t$(\"#explanation-equation\").html(fullExplanation);\r\n\t\r\n\r\n\t\t\t//updates equation\r\n\t\t\tPreview.Update();\r\n\t\t}\r\n\t}\r\n\r\n\tfunction process(processName,burstTime, arrivalTime,pIndex, newPriority) \r\n\t{\r\n\t\tthis.processName=processName;\r\n\t\tthis.burstTime=burstTime;\r\n\t\tthis.initialBurst=burstTime;\r\n\t\tthis.arrivalTime=arrivalTime;\r\n\t\tthis.done=false;\r\n\t\tthis.hasStarted=false;\r\n\t\tthis.finishTime;\r\n\t\tthis.priority=newPriority;\r\n\r\n\t\tthis.pIndex=pIndex;\r\n\r\n\t\tthis.finished = function(){\r\n\t\t\tthis.done=true;\r\n\t\t\tthis.finishTime=position;\r\n\r\n\t\t\tconsole.log(this.processName+\" finished at position:\"+position);\r\n\t\t\tconsole.log(\"wait time:\"+ (this.finishTime-this.arrivalTime- this.initialBurst));\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t//sorts the processArray in terms of arrival times\r\n\tfunction sortArriveTimes(){\r\n\r\n\t\tfunction compareArrivals(process1,process2) {\r\n\t\t\t\r\n\t\t\tif (process1.arrivalTime > process2.arrivalTime)\r\n\t\t\t{\r\n\t\t\t\treturn 1;\r\n\t\t\t}\r\n\r\n\t\t\telse if (process1.arrivalTime < process2.arrivalTime)\r\n\t\t\t{\r\n\t\t\t\treturn-1;\r\n\t\t\t}\t\r\n\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\treturn 0;\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tprocessArray.sort(compareArrivals);\r\n\t}\r\n\r\n\t//sorts the processArray in terms of process names. i.e. P1,P2,P3, etc\r\n\tfunction sortNames(){\r\n\r\n\t\tfunction compareNames(process1,process2) {\r\n\t\t\t\r\n\t\t\tif (process1.pIndex> process2.pIndex)\r\n\t\t\t{\r\n\t\t\t\treturn 1;\r\n\t\t\t}\r\n\r\n\t\t\telse if (process1.pIndex < process2.pIndex)\r\n\t\t\t{\r\n\t\t\t\treturn-1;\r\n\t\t\t}\t\r\n\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\treturn 0;\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tprocessArray.sort(compareNames);\r\n\t}\r\n\r\n\t//loads the values into processArray from the table\r\n\tfunction loadValues(){\r\n\t\tprocessArray=[];\r\n\r\n\t\trunningTime=0;\r\n\r\n\t\tvar index=0;\r\n\t\tfor(var i=0; i<processCount; i++)\r\n\t\t{\r\n\r\n\t\t\tvar burstTime=Number( $(\"#burst_\"+(i+1) ).val() )+0.0; \r\n\t\t\trunningTime+=burstTime;\r\n\t\t\tvar arrivalTime=Number( $(\"#arrive_\"+(i+1) ).val() )+0.0;\r\n\t\t\tvar processName= \"P\"+(i+1);\r\n\t\t\tvar priority = Number( $(\"#priority_\"+(i+1) ).val() )+0.0;\r\n\t\t\tif(burstTime>0 && isNaN(arrivalTime)==false )\r\n\t\t\t{\r\n\t\t\t\tprocessArray[index]= new process( processName, burstTime, arrivalTime, i, priority);\r\n\t\t\t\tindex++;\r\n\t\t\t}\r\n\r\n\r\n\t\t}\r\n\t}\r\n\r\n\tfunction addToBar(processName, percent, start, duration, index)\r\n\t{\r\n\t\t//find the end time of the process\r\n\t\tvar end = start+duration;\r\n\t\tend=parseFloat(end.toPrecision(12));\r\n\r\n\t\tif($(\"#bar_\"+index).length ==0)\r\n\t\t{\r\n\t\t\t$(\".progress\").append(\" <div class='progress-bar' data-toggle='tooltip' title=' ' data-placement='right' id='bar_\"+index+\"' role='progressbar' >\"+processName+\"</div>\");\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\t$(\"#bar_\"+index).removeClass(\"progress-bar-idle\");\r\n\t\t\t$(\"#bar_\"+index).removeClass(\"progress-bar-context\");\r\n\t\t\t$(\"#bar_\"+index).removeClass(\"progress-bar-first\");\r\n\t\t\t$(\"#bar_\"+index).removeClass(\"progress-bar-second\");\r\n\t\t\t$(\"#bar_\"+index).removeClass(\"progress-bar-third\");\r\n\t\t\t$(\"#bar_\"+index).removeClass(\"progress-bar-fourth\");\r\n\t\t\t$(\"#bar_\"+index).removeClass(\"progress-bar-fifth\");\r\n\t\t}\r\n\r\n\r\n\r\n\t\tif(processName==\"P1\")\r\n\t\t{\r\n\t\t\t$(\"#bar_\"+index).addClass(\"progress-bar-first\");\r\n\r\n\t\t}\r\n\t\telse if(processName==\"P2\")\r\n\t\t{\r\n\t\t\t$(\"#bar_\"+index).addClass(\"progress-bar-second\");\r\n\t\t}\r\n\r\n\t\telse if(processName==\"P3\")\r\n\t\t{\r\n\t\t\t$(\"#bar_\"+index).addClass(\"progress-bar-third\");\r\n\t\t}\r\n\r\n\t\telse if(processName==\"P4\")\r\n\t\t{\r\n\t\t\t$(\"#bar_\"+index).addClass(\"progress-bar-fourth\");\r\n\t\t}\r\n\r\n\t\telse if(processName==\"P5\")\r\n\t\t{\r\n\t\t\t$(\"#bar_\"+index).addClass(\"progress-bar-fifth\");\r\n\t\t}\r\n\r\n\t\telse if(processName==\"context switch\")\r\n\t\t{\r\n\t\t\t$(\"#bar_\"+index).addClass(\"progress-bar-context\");\r\n\t\t}\r\n\t\telse if(processName==\"idle\")\r\n\t\t{\r\n\t\t\t$(\"#bar_\"+index).addClass(\"progress-bar-idle\");\r\n\t\t}\r\n\t\t\r\n\r\n\t\tvar newName=processName;\r\n\r\n\t\tvar tooltip;\r\n\r\n\t\tvar toolTipTitle= processName;\r\n\r\n\t\tif(processName==\"idle\")\r\n\t\t{\r\n\t\t\ttoolTipTitle=\"Idle CPU\";\r\n\t\t\tnewName=\"\";\r\n\t\t}\r\n\r\n\t\telse if(processName==\"context switch\")\r\n\t\t{\r\n\t\t\ttoolTipTitle=\"Context Switch\";\r\n\t\t\tnewName=\"\";\r\n\t\t}\r\n\r\n\t\t//sets the tooltip\r\n\t\t$(\"#bar_\"+index).attr('title', toolTipTitle+\"\\nStart: \"+start+\"\\nDuration: \"+duration+\"\\nEnd: \"+end);\r\n\r\n\t\t//sets the processName, should be blank for context switch or idle\r\n\t\t$(\"#bar_\"+index).text(newName);\r\n\t\t\r\n\t\t//sets the width of the progress bar item\r\n\t\t$(\"#bar_\"+index).css('width',percent+\"%\");\r\n\t}\r\n\r\n\t//First Come First Served function\r\n\tfunction FCFS(){\r\n\t\tsortArriveTimes();\r\n\r\n\r\n\t\tfor(var i=0; i<processArray.length; i++)\r\n\t\t{\r\n\t\t\tfillGaps();\r\n\r\n\t\t\tbar.addItem(processArray[i].processName, processArray[i].burstTime);\r\n\r\n\t\t\tprocessArray[i].finished();\r\n\t\t}\r\n\t\t\r\n\t}\r\n\tfunction SJF(){\r\n\t\tsortArriveTimes();\r\n\r\n\t\twhile (isDone() == false)\t\r\n\t\t{\r\n\r\n\t\t\tfillGaps();\r\n\r\n\t\t\tvar i = findSmallestBurstIndex();\r\n\r\n\t\t\tbar.addItem(processArray[i].processName, processArray[i].burstTime);\r\n\r\n\t\t\tprocessArray[i].finished();\r\n\r\n\t\t}\t\r\n\r\n\t}\r\n\r\n\t//Shortes Remaining Job First algorithm\r\n\tfunction SRJF (){\r\n\r\n\r\n\t\tfunction findNextJump(proccessIndex){\r\n\t\t\tvar interruptFound=false;\r\n\r\n\t\t\tfor (var i =0; i< processArray.length; i++) {\r\n\t\t\t\tif(processArray[i].done==false \r\n\t\t\t\t\t&& processArray[i].arrivalTime<position+processArray[proccessIndex].burstTime\r\n\t\t\t\t\t&& processArray[i].arrivalTime > processArray[proccessIndex].arrivalTime\r\n\t\t\t\t\t&& processArray[i].burstTime < processArray[proccessIndex].burstTime \r\n\t\t\t\t\t&& i!=proccessIndex\r\n\t\t\t\t\t&& processArray[i].hasStarted==false)\r\n\t\t\t\t{\r\n\t\t\t\t\tconsole.log(\"interupted by:\"+processArray[i].processName);\r\n\t\t\t\t\tprocessArray[proccessIndex].burstTime -= processArray[i].arrivalTime - position;\r\n\t\t\t\t\tbar.addItem(processArray[proccessIndex].processName, processArray[i].arrivalTime - position);\r\n\t\t\t\t\tprocessArray[proccessIndex].hasStarted=true;\r\n\t\t\t\t\tinterruptFound=true;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t\r\n\t\t\t}\r\n\r\n\t\t\tif(interruptFound==false)\r\n\t\t\t{\r\n\t\t\t\tbar.addItem(processArray[proccessIndex].processName, processArray[proccessIndex].burstTime);\r\n\t\t\t\tprocessArray[proccessIndex].finished();\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tsortArriveTimes();\r\n\t\twhile (isDone() == false)\t\r\n\t\t{\r\n\t\t\t\r\n\r\n\t\t\tfillGaps();\r\n\r\n\t\t\tvar i = findSmallestBurstIndex();\r\n\r\n\t\t\tconsole.log(\"starting:\"+processArray[i].processName);\r\n\r\n\t\t\tfindNextJump(i);\r\n\r\n\t\t\t\r\n\r\n\r\n\r\n\t\t}\t\r\n\r\n\t}\r\n\r\n\tfunction priority(){\r\n\r\n\t\tfunction findNextJump(proccessIndex){\r\n\t\t\tvar interruptFound=false;\r\n\r\n\t\t\tfor (var i =0; i< processArray.length; i++) {\r\n\t\t\t\tif(processArray[i].done==false \r\n\t\t\t\t\t&& processArray[i].arrivalTime<position+processArray[proccessIndex].burstTime\r\n\t\t\t\t\t&& processArray[i].arrivalTime > processArray[proccessIndex].arrivalTime\r\n\t\t\t\t\t&& processArray[i].priority < processArray[proccessIndex].priority \r\n\t\t\t\t\t&& i!=proccessIndex\r\n\t\t\t\t\t&& processArray[i].hasStarted==false)\r\n\t\t\t\t{\r\n\t\t\t\t\tconsole.log(\"interupted by:\"+processArray[i].processName);\r\n\t\t\t\t\tprocessArray[proccessIndex].burstTime -= processArray[i].arrivalTime - position;\r\n\t\t\t\t\tbar.addItem(processArray[proccessIndex].processName, processArray[i].arrivalTime - position);\r\n\t\t\t\t\tprocessArray[proccessIndex].hasStarted=true;\r\n\t\t\t\t\tinterruptFound=true;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t\r\n\t\t\t}\r\n\r\n\t\t\tif(interruptFound==false)\r\n\t\t\t{\r\n\t\t\t\tbar.addItem(processArray[proccessIndex].processName, processArray[proccessIndex].burstTime);\r\n\t\t\t\tprocessArray[proccessIndex].finished();\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tsortArriveTimes();\r\n\t\twhile (isDone() == false)\t\r\n\t\t{\r\n\t\t\t\r\n\r\n\t\t\tfillGaps();\r\n\r\n\t\t\tvar i = findSmallestPriorityIndex();\r\n\r\n\t\t\tconsole.log(\"starting:\"+processArray[i].processName);\r\n\r\n\t\t\tfindNextJump(i);\r\n\r\n\t\t\t\r\n\r\n\r\n\r\n\t\t}\t\r\n\r\n\t}\r\n\r\n\tfunction roundRobin() {\r\n\r\n\r\n\t\tfunction findNextJump(index){\r\n\t\t\t\r\n\r\n\r\n\t\t\twhile (true) {\r\n\r\n\t\t\t\tif (processArray[index].burstTime <= timeQuantum\r\n\t\t\t\t\t&& processArray[index].done==false \r\n\t\t\t\t\t&& processArray[index].arrivalTime<=position)\r\n\t\t\t\t{\r\n\t\t\t\t\tbar.addItem(processArray[index].processName, processArray[index].burstTime);\r\n\t\t\t\t\tprocessArray[index].finished();\r\n\r\n\t\t\t\t\tconsole.log(\"finished:\"+processArray[index].processName + \"  postion:\"+position);\r\n\t\t\t\t\tindex = (index + 1) % processArray.length\r\n\t\t\t\t\treturn index;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif(processArray[index].done==false \r\n\t\t\t\t\t&& processArray[index].arrivalTime <= position\r\n\t\t\t\t\t&& processArray[index].burstTime > timeQuantum)\r\n\r\n\t\t\t\t{\r\n\t\t\t\t\tconsole.log(\"switched to:\"+processArray[index].processName);\r\n\t\t\t\t\tprocessArray[index].burstTime -= timeQuantum;\r\n\t\t\t\t\tbar.addItem(processArray[index].processName, timeQuantum);\r\n\t\t\t\t\t\r\n\t\t\t\t\t\r\n\r\n\t\t\t\t\t\r\n\t\t\t\t}\r\n\r\n\t\t\t\tindex = (index + 1) % processArray.length\r\n\r\n\r\n\r\n\r\n\t\t\t}\r\n\r\n\t\t\t\r\n\r\n\r\n\t\t}\r\n\r\n\t\tvar i = 0;\r\n\r\n\t\tsortArriveTimes();\r\n\t\twhile (isDone() == false)\t\r\n\t\t{\r\n\t\t\t\r\n\t\t\tfillGaps();\r\n\r\n\t\t\tconsole.log(\"starting:\"+processArray[i].processName);\r\n\r\n\t\t\ti= findNextJump(i);\r\n\r\n\t\t}\t\r\n\t}\r\n\r\n\r\n\tfunction run(){\r\n\t\tloadValues();\r\n\r\n\t\tif(processArray.length>0)\r\n\t\t{\r\n\r\n\t\t\tsortArriveTimes();\r\n\t\t\tposition=0;\r\n\r\n\r\n\t\t\tbar = new progressBar();\r\n\r\n\t\t\tif(algorithm==\"FCFS\")\r\n\t\t\t{\r\n\t\t\t\t$(\"#algorithm_explanation\").text(\"First Come First Served will execute proccesses in the order in which they arrived\");\r\n\t\t\t\tFCFS();\r\n\t\t\t}\r\n\r\n\t\t\telse if (algorithm==\"SJF\"){\r\n\t\t\t\t$(\"#algorithm_explanation\").text(\"Shortest Job First will execute proccesses from smallest to biggest\");\r\n\t\t\t\tSJF();\r\n\t\t\t}\r\n\r\n\t\t\telse if (algorithm==\"SRJF\"){\r\n\t\t\t\tSRJF();\r\n\t\t\t\t$(\"#algorithm_explanation\").text(\"Shortest Remaining Job First will execute proccesses from smallest to biggest. If a new proccess arrives that is smaller than the currently running proccess, it will interrupt it.\");\r\n\t\t\t}\r\n\r\n\t\t\telse if (algorithm==\"Round Robin\"){\r\n\t\t\t\t$(\"#algorithm_explanation\").text(\"Round Robin will execute each proccess for the duration of the time quantum. It will then move on to the next proccess. \");\r\n\t\t\t\troundRobin();\r\n\t\t\t}\r\n\r\n\t\t\t\r\n\r\n\t\t\tif (algorithm==\"Priority\"){\r\n\t\t\t\t$(\".priority\").collapse(\"show\");\r\n\t\t\t\t$(\"#algorithm_explanation\").text(\"Priority Scheduling will execute each process according to the assigned priority. In this case a lower priority number is better.\");\r\n\t\t\t\tpriority();\r\n\t\t\t}\r\n\r\n\t\t\tbar.displayBar();\r\n\t\t}\t\r\n\r\n\r\n\t}\r\n\r\n\r\n//creates the tick marks under the gant chart\r\nfunction createRuler(itemAmount){\r\n\r\n\tvar multi=1;\r\n\tvar word= \" \"+itemAmount;\r\n\r\n\tif(itemAmount > 5000)\r\n\t{\r\n\t\tconsole.log(\"length:\"+word.length)\r\n\t\tvar power = Math.pow(10, word.length-2);\r\n\t\titemAmount=itemAmount/power;\r\n\t\tmulti=power;\r\n\t}\r\n\r\n\r\n\telse if(itemAmount > 2500)\r\n\t{\r\n\t\titemAmount=itemAmount/100;\r\n\t\tmulti=100;\r\n\t}\r\n\r\n\telse if(itemAmount > 1000)\r\n\t{\r\n\t\titemAmount=itemAmount/50;\r\n\t\tmulti=50;\r\n\t}\r\n\r\n\telse if(itemAmount > 500)\r\n\t{\r\n\t\titemAmount=itemAmount/25;\r\n\t\tmulti=25;\r\n\t}\r\n\r\n\r\n\telse if(itemAmount > 100)\r\n\t{\r\n\t\titemAmount=itemAmount/10;\r\n\t\tmulti=10;\r\n\t}\r\n\r\n\telse if(itemAmount > 50)\r\n\t{\r\n\t\titemAmount=itemAmount/5;\r\n\t\tmulti=5;\r\n\t}\r\n\r\n\r\n\tfor(var j=0;j<itemAmount;j++)\r\n\t{\r\n\t\tvar ruler = $(\"#rule2\").empty();\r\n\t\tvar len = Number(itemAmount) || 0;\r\n\t\t\r\n\r\n\t\t// add text\r\n\r\n\t\t\tvar\titem = $(document.createElement(\"li\"));\r\n\t\t\t$(item).addClass(\"zero\");\r\n\t\t\truler.append(item.text( 0 ) );\r\n\r\n\t\tfor (var i = 0; i < len; i++) \r\n\t\t{\r\n\t\t\tvar\titem = $(document.createElement(\"li\"));\r\n\t\t\truler.append(item.text( ( (i+1)*multi) ) );\r\n\t\t}\r\n\r\n\r\n\t}\r\n\r\n\r\n\tvar width= $(\".progress\").width();\r\n\r\n\tvar spacing = (width/itemAmount)+ \"px\";\r\n\t$(\".ruler\").css(\"padding-right\", spacing).find(\"li\").css(\"padding-left\", spacing);\r\n\t$(\".zero\").css(\"padding-left\", 0);\r\n\t$(\".zero\").css(\"padding-right\", \"0.5px\");\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/*\r\n****************************************************************\r\n\t\t\t\t\tAll the click event listeners\r\n****************************************************************\r\n*/\r\n\r\n$('#add_row').click(function(){\r\n\tprocessCount++;\r\n\t$(\"#row_\"+processCount).collapse(\"show\");\r\n\r\n\t$('#remove_row').prop(\"disabled\",false);\r\n\tif(processCount==5)\r\n\t{\r\n\t\t$('#add_row').prop(\"disabled\",true);\r\n\t}\r\n\r\n\trun();\r\n\t$('#proccess_num').val(processCount);\r\n});\r\n\r\n//removing a row\r\n$('#remove_row').click(function(){\r\n\r\n\t$(\"#row_\"+processCount).collapse(\"hide\");\r\n\tprocessCount--;\r\n\r\n\t$('#add_row').prop(\"disabled\",false);\r\n\tif(processCount==1)\r\n\t{\r\n\t\t$('#remove_row').prop(\"disabled\",true);\r\n\t}\r\n\trun();\r\n\t$('#proccess_num').val(processCount);\r\n});\r\n\r\n\r\n$('#subtract_context').click(function(){\r\n\r\n\tif(contexSwitch>=0.1)\r\n\t{\r\n\t\tcontexSwitch-= 0.1;\r\n\t\tcontexSwitch=parseFloat(contexSwitch.toPrecision(12));\r\n\t}\r\n\r\n\r\n\trun();\r\n\t$('#enter_context').val(contexSwitch);\r\n});\r\n\r\n\r\n$('#add_context').click(function(){\r\n\r\n\r\n\t\tcontexSwitch+= 0.1;\r\n\t\tcontexSwitch=parseFloat(contexSwitch.toPrecision(12));\r\n\t\trun();\r\n\t\t$('#enter_context').val(contexSwitch);\r\n\r\n});\r\n\r\n$('#subtract_quantum').click(function(){\r\n\r\n\tif(timeQuantum>0.5)\r\n\t{\r\n\t\ttimeQuantum-= 0.5;\r\n\t\ttimeQuantum=parseFloat(timeQuantum.toPrecision(12));\r\n\t}\r\n\r\n\trun();\r\n\t$('#enter_quantum').val(timeQuantum);\r\n});\r\n\r\n\r\n$('#add_quantum').click(function(){\r\n\r\n\t\ttimeQuantum+= 0.5;\r\n\t\ttimeQuantum=parseFloat(timeQuantum.toPrecision(12));\r\n\r\n\t\trun();\r\n\t\t$('#enter_quantum').val(timeQuantum);\r\n\r\n});\r\n\r\n\r\n// when you enter a quantum time, used for Round Robin\r\n$('#enter_quantum').on('input propertychange paste', function(){\r\n\r\n\tif(isNaN($(this).val())==false && $(this).val()!=0)\r\n\t{\r\n\t\ttimeQuantum= Number($(this).val());\r\n\t}\r\n\r\n\trun();\r\n});\r\n\r\n//when you set a context switch time\r\n$('#enter_context').on('input propertychange paste', function(){\r\n\r\n\tif(isNaN($(this).val())==false)\r\n\t{\r\n\t\tcontexSwitch= Number($(this).val());\r\n\t}\r\n\trun();\r\n});\r\n\r\n//when you input a value into the table\r\n$('td input').on('input propertychange paste', function(){\r\n\trun();\r\n\t\r\n});\r\n\r\n\r\n\r\n//when you click on the algorithm dropdown\r\n$(\".algorithm_dropdown li a\").click( function(){\r\n\t$(\"#algorithm_button\").html($(this).attr(\"calcStyle\")+' <span class=\"caret\">');\r\n\talgorithm=$(this).attr(\"calcStyle\");\r\n\r\n\tif(algorithm==\"Round Robin\")\r\n\t{\r\n\t\t$(\"#solver_group\").removeClass(\"hidden\");\r\n\t}\r\n\telse\r\n\t{\r\n\t\t$(\"#solver_group\").addClass(\"hidden\");\r\n\t}\r\n\r\n\t\tif(algorithm!=\"Priority\")\t\r\n\t\t{\r\n\t\t\t$(\".priority\").collapse(\"hide\");\r\n\t\t}\r\n\r\n\trun();\r\n\t\r\n})\r\n\r\n\r\n\r\n$( window ).resize(function() {\r\n  createRuler(bar.sum);\r\n});\r\n\r\n\r\n\r\n});\r\n"]}