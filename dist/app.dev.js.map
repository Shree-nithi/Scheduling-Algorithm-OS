{"version":3,"sources":["app.js"],"names":["$","document","ready","hide","on","value","show","processList","processID","arrivalTime","burstTime","val","addClass","process","parseInt","push","append","length","alert","selectedAlgo","children","cfs","shortestJobFirst","shortestRemainingTimeFirst","roundRobin","completedList","time","queue","addToQueue","processToRun","selectProcess","i","completedTime","turnAroundTime","waitingTime","splice","sort","a","b","shift","each","key","avgTurnaroundTime","avgWaitingTime","maxCompletedTime","throughput","selectProcessForSRTF","runSRTF","TableData","row","tr","find","text","forEach","pInTable","pInCompleted","timeQuantum","timeQuantumVal","totalCpuTime","minVruntime","Infinity","selectProcessForCFS","vruntime","weight","remainingBurstTime","Math","min","delta","round","totalTurnaroundTime","totalWaitingTime","selectProcessForRR","index"],"mappings":"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","sourcesContent":["$(document).ready(\r\n    function(){\r\n\r\n        $(\".form-group-time-quantum\").hide();\r\n\r\n        // Show hide RR time quantum\r\n        $('#algorithmSelector').on('change', function(){\r\n            if(this.value === 'optRR' || this.value === 'optCFS') {\r\n                $(\".form-group-time-quantum\").show(1000);\r\n            } else {\r\n                $(\".form-group-time-quantum\").hide(1000);\r\n            }\r\n        });\r\n\r\n\r\n        var processList = [];\r\n\r\n        $('#btnAddProcess').on('click', function(){\r\n            var processID = $('#processID');\r\n            var arrivalTime = $('#arrivalTime');\r\n            var burstTime = $('#burstTime');\r\n\r\n            if(processID.val() === '' || arrivalTime.val() === '' || burstTime.val() === '' ){\r\n                processID.addClass('is-invalid');\r\n                arrivalTime.addClass('is-invalid');\r\n                burstTime.addClass('is-invalid');\r\n                return;\r\n            }\r\n\r\n            var process = {\r\n                processID: parseInt(processID.val(), 10),\r\n                arrivalTime: parseInt(arrivalTime.val(), 10),\r\n                burstTime: parseInt(burstTime.val(), 10),\r\n\r\n            }\r\n\r\n            processList.push(process);\r\n\r\n            $('#tblProcessList > tbody:last-child').append(\r\n                `<tr>\r\n                    <td id=\"tdProcessID\">${processID.val()}</td>\r\n                    <td id=\"tdArrivalTime\">${arrivalTime.val()}</td>\r\n                    <td id=\"tdBurstTime\">${burstTime.val()}</td>\r\n\r\n                </tr>`\r\n            );\r\n\r\n            processID.val('');\r\n            arrivalTime.val('');\r\n            burstTime.val('');\r\n\r\n        });\r\n\r\n        $('#btnCalculate').on('click', function(){\r\n\r\n            if (processList.length == 0) {\r\n                alert('Please insert some processes');\r\n                return;\r\n            }\r\n\r\n            var selectedAlgo = $('#algorithmSelector').children('option:selected').val();\r\n            if (selectedAlgo === 'optCFS')\r\n            {\r\n                cfs();\r\n            }\r\n            if (selectedAlgo === 'optSJF') {\r\n                shortestJobFirst();\r\n            }\r\n\r\n            if (selectedAlgo === 'optSRTF') {\r\n                shortestRemainingTimeFirst();\r\n            }\r\n\r\n            if (selectedAlgo === 'optRR') {\r\n                roundRobin();\r\n            }\r\n        });\r\n\r\n        function shortestJobFirst(){\r\n            var completedList = [];\r\n            var time = 0;\r\n            var queue = [];\r\n\r\n            while (processList.length>0 || queue.length>0) {\r\n                addToQueue();\r\n                while (queue.length==0) {\r\n                    time++;\r\n                    addToQueue();\r\n                }\r\n                processToRun = selectProcess();\r\n                for (var i = 0; i < processToRun.burstTime; i++) {\r\n                    time++;\r\n                    addToQueue();\r\n                }\r\n                processToRun.processID = processToRun.processID;\r\n                processToRun.arrivalTime = processToRun.arrivalTime;\r\n                processToRun.burstTime = processToRun.burstTime;\r\n                processToRun.completedTime = time;\r\n                processToRun.turnAroundTime = processToRun.completedTime - processToRun.arrivalTime;\r\n                processToRun.waitingTime = processToRun.turnAroundTime - processToRun.burstTime;\r\n                completedList.push(processToRun);\r\n            }\r\n            function addToQueue() {\r\n                for(var i = 0; i < processList.length; i++) {\r\n                    if(processList[i].arrivalTime === time) {\r\n                        var process = {\r\n                            processID: processList[i].processID,\r\n                            arrivalTime: processList[i].arrivalTime,\r\n                            burstTime: processList[i].burstTime\r\n                        }\r\n                        processList.splice(i, 1);\r\n                        queue.push(process);\r\n                    }\r\n                }\r\n            }\r\n            function selectProcess() {\r\n                if (queue.length!=0) {\r\n                    queue.sort(function(a, b){\r\n                        if (a.burstTime > b.burstTime) {\r\n                            return 1;\r\n                        } else {\r\n                            return -1;\r\n                        }\r\n                    });\r\n                }\r\n                var process = queue.shift();\r\n                return process;\r\n            }\r\n\r\n            // Bind table data\r\n            $.each(completedList, function(key, process){\r\n                $('#tblResults > tbody:last-child').append(\r\n                    `<tr>\r\n                        <td id=\"tdProcessID\">${process.processID}</td>\r\n                        <td id=\"tdArrivalTime\">${process.arrivalTime}</td>\r\n                        <td id=\"tdBurstTime\">${process.burstTime}</td>\r\n                        <td id=\"tdBurstTime\">${process.completedTime}</td>\r\n                        <td id=\"tdBurstTime\">${process.waitingTime}</td>\r\n                        <td id=\"tdBurstTime\">${process.turnAroundTime}</td>\r\n                    </tr>`\r\n                );\r\n            });\r\n\r\n            // Get average\r\n            var avgTurnaroundTime = 0;\r\n            var avgWaitingTime = 0;\r\n            var maxCompletedTime = 0;\r\n            var throughput = 0;\r\n\r\n            $.each(completedList, function(key, process){\r\n                if (process.completedTime > maxCompletedTime) {\r\n                    maxCompletedTime = process.completedTime;\r\n                }\r\n                avgTurnaroundTime = avgTurnaroundTime + process.turnAroundTime;\r\n                avgWaitingTime = avgWaitingTime + process.waitingTime;\r\n            });\r\n\r\n            $('#avgTurnaroundTime').val( avgTurnaroundTime / completedList.length );\r\n            $('#avgWaitingTime').val( avgWaitingTime / completedList.length );\r\n            $('#throughput').val(completedList.length / maxCompletedTime);\r\n        }\r\n\r\n        function shortestRemainingTimeFirst() {\r\n            var completedList = [];\r\n            var time = 0;\r\n            var queue = [];\r\n\r\n            while ( processList.length>0 || queue.length>0 ) {\r\n                addToQueue();\r\n                while (queue.length==0) {\r\n                    time++;\r\n                    addToQueue();\r\n                }\r\n             selectProcessForSRTF();\r\n             runSRTF();\r\n            }\r\n\r\n            function addToQueue() {\r\n                for(var i = 0; i < processList.length; i++) {\r\n                    if(processList[i].arrivalTime === time) {\r\n                        var process = {\r\n                            processID: processList[i].processID,\r\n                            arrivalTime: processList[i].arrivalTime,\r\n                            burstTime: processList[i].burstTime\r\n                        }\r\n                        processList.splice(i, 1);\r\n                        queue.push(process);\r\n                    }\r\n                }\r\n            }\r\n            function selectProcessForSRTF() {\r\n                if (queue.length != 0) {\r\n                    queue.sort(function(a, b){\r\n                        if (a.burstTime > b.burstTime) {\r\n                            return 1;\r\n                        } else {\r\n                            return -1;\r\n                        }\r\n                    });\r\n                    if (queue[0].burstTime == 1) {\r\n                        process = queue.shift();\r\n                        process.completedTime = time + 1;\r\n                        completedList.push(process);\r\n\r\n                    } else if(queue[0].burstTime > 1){\r\n                        process = queue[0];\r\n                        queue[0].burstTime = process.burstTime - 1;\r\n                    }\r\n                }\r\n            }\r\n            function runSRTF() {\r\n                time++;\r\n                addToQueue();\r\n            }\r\n\r\n            // Fetch table data\r\n            var TableData = [];\r\n            $('#tblProcessList tr').each(function(row, tr) {\r\n                TableData[row] = {\r\n                    \"processID\": parseInt($(tr).find('td:eq(0)').text()),\r\n                    \"arrivalTime\": parseInt($(tr).find('td:eq(1)').text()),\r\n                    \"burstTime\": parseInt($(tr).find('td:eq(2)').text())\r\n                }\r\n            });\r\n\r\n            // Remove header row\r\n            TableData.splice(0, 1);\r\n\r\n            // Reset burst time\r\n            TableData.forEach(pInTable => {\r\n                completedList.forEach(pInCompleted => {\r\n                    if (pInTable.processID == pInCompleted.processID) {\r\n                        pInCompleted.burstTime = pInTable.burstTime;\r\n                        pInCompleted.turnAroundTime = pInCompleted.completedTime - pInCompleted.arrivalTime;\r\n                        pInCompleted.waitingTime = pInCompleted.turnAroundTime - pInCompleted.burstTime;\r\n                    }\r\n                });\r\n            });\r\n\r\n            // Bind table data\r\n            $.each(completedList, function(key, process){\r\n                $('#tblResults > tbody:last-child').append(\r\n                    `<tr>\r\n                        <td id=\"tdProcessID\">${process.processID}</td>\r\n                        <td id=\"tdArrivalTime\">${process.arrivalTime}</td>\r\n                        <td id=\"tdBurstTime\">${process.burstTime}</td>\r\n                        <td id=\"tdBurstTime\">${process.completedTime}</td>\r\n                        <td id=\"tdBurstTime\">${process.waitingTime}</td>\r\n                        <td id=\"tdBurstTime\">${process.turnAroundTime}</td>\r\n                    </tr>`\r\n                );\r\n            });\r\n\r\n            // Get average\r\n            var avgTurnaroundTime = 0;\r\n            var avgWaitingTime = 0;\r\n            var maxCompletedTime = 0;\r\n            var throughput = 0;\r\n\r\n            $.each(completedList, function(key, process){\r\n                if (process.completedTime > maxCompletedTime) {\r\n                    maxCompletedTime = process.completedTime;\r\n                }\r\n                avgTurnaroundTime = avgTurnaroundTime + process.turnAroundTime;\r\n                avgWaitingTime = avgWaitingTime + process.waitingTime;\r\n            });\r\n\r\n            $('#avgTurnaroundTime').val( avgTurnaroundTime / completedList.length );\r\n            $('#avgWaitingTime').val( avgWaitingTime / completedList.length );\r\n            $('#throughput').val(completedList.length / maxCompletedTime);\r\n        }\r\n        /////////////////////////////////////////////////////////////\r\n        function cfs() {\r\n            // Fetch time quantum and total available CPU time\r\n            var timeQuantum = $('#timeQuantum');\r\n            var timeQuantumVal = parseInt(timeQuantum.val(), 10);\r\n            if (timeQuantum.val() == '') {\r\n                alert('Please enter time quantum');\r\n                timeQuantum.addClass('is-invalid');\r\n                return;\r\n            }\r\n            var totalCpuTime = 0;\r\n            $('#tblProcessList tr').each(function(row, tr) {\r\n                if (row > 0) {\r\n                    totalCpuTime += parseInt($(tr).find('td:eq(2)').text());\r\n                }\r\n            });\r\n\r\n            // Initialize variables\r\n            var completedList = [];\r\n            var time = 0;\r\n            var queue = [];\r\n            var minVruntime = Infinity;\r\n\r\n            while (processList.length > 0 || queue.length > 0) {\r\n                addToQueue();\r\n                queue.sort(function(a, b) {\r\n                    if (a.arrivalTime > b.arrivalTime) {\r\n                        return 1;\r\n                    } else {\r\n                        return -1;\r\n                    }\r\n                });\r\n                selectProcessForCFS();\r\n            }\r\n\r\n            function addToQueue() {\r\n                for (var i = 0; i < processList.length; i++) {\r\n                    if (processList[i].arrivalTime <= time) {\r\n                        var process = {\r\n                            processID: processList[i].processID,\r\n                            arrivalTime: processList[i].arrivalTime,\r\n                            burstTime: processList[i].burstTime,\r\n                            vruntime: processList[i].vruntime || 0,\r\n                            weight: processList[i].weight || 1\r\n                        };\r\n                        processList.splice(i, 1);\r\n                        queue.push(process);\r\n                    }\r\n                }\r\n            }\r\n\r\n            function selectProcessForCFS() {\r\n                if (queue.length > 0) {\r\n                    var process = queue[0];\r\n                    queue.splice(0, 1);\r\n                    var remainingBurstTime = process.burstTime - timeQuantumVal;\r\n                    process.completedTime = time + Math.min(process.burstTime, timeQuantumVal);\r\n\r\n                    // Update vruntime and weight\r\n                    var delta = process.weight * (time - process.arrivalTime) / process.burstTime;\r\n                    process.vruntime += delta;\r\n                    process.weight *= 2;\r\n\r\n                    // Add to completed list if process has finished\r\n                    if (process.burstTime <= timeQuantumVal) {\r\n                        process.burstTime = 0;\r\n                        completedList.push(process);\r\n                    } else if (remainingBurstTime > 0) {\r\n                        process.burstTime = remainingBurstTime;\r\n                        queue.push(process);\r\n                    }\r\n\r\n                    // Update time\r\n                    time += Math.min(process.burstTime, timeQuantumVal);\r\n\r\n                    // Add new processes to queue\r\n                    addToQueue();\r\n                } else {\r\n                    time++;\r\n                    addToQueue();\r\n                }\r\n                // Check if the total available CPU time has been exceeded\r\n                if (time >= totalCpuTime) {\r\n                    return;\r\n                }\r\n            }\r\n\r\n            // Calculate turnaround time, waiting time, and vruntime for each process\r\n            completedList.forEach(function(process) {\r\n                process.turnAroundTime = process.completedTime - process.arrivalTime;\r\n                process.waitingTime = process.turnAroundTime - process.burstTime;\r\n                process.vruntime = Math.round(process.vruntime);\r\n            });\r\n\r\n            // Bind table data\r\n            $.each(completedList, function(key, process) {\r\n                $('#tblResults > tbody:last-child').append(\r\n                    `<tr>\r\n                        <td id=\"tdProcessID\">${process.processID}</td>\r\n                        <td id=\"tdArrivalTime\">${process.arrivalTime}</td>\r\n                        <td id=\"tdBurstTime\">${process.burstTime}</td>\r\n                        <td id=\"tdBurstTime\">${process.completedTime}</td>\r\n                        <td id=\"tdBurstTime\">${process.waitingTime}</td>\r\n                        <td id=\"tdBurstTime\">${process.turnAroundTime}</td>\r\n                    </tr>`\r\n                );\r\n            });\r\n\r\n            // Calculate and display averages\r\n            var totalTurnaroundTime = 0;\r\n            var totalWaitingTime = 0;\r\n            $.each(completedList, function(key, process) {\r\n                totalTurnaroundTime += process.turnAroundTime;\r\n                totalWaitingTime += process.waitingTime;\r\n            });\r\n            $('#avgTurnaroundTime').val(totalTurnaroundTime / completedList.length);\r\n            $('#avgWaitingTime').val(totalWaitingTime / completedList.length);\r\n            $('#throughput').val(completedList.length / totalCpuTime);\r\n        }\r\n            ///////////////////////////////////////////////////////////////////////////////////////////////////\r\n        function roundRobin() {\r\n            var timeQuantum = $('#timeQuantum');\r\n            var timeQuantumVal= parseInt(timeQuantum.val(), 10);\r\n            if(timeQuantum.val() ==''){\r\n                alert('Please enter time quantum');\r\n                timeQuantum.addClass('is-invalid');\r\n                return;\r\n            }\r\n            var completedList = [];\r\n            var time = 0;\r\n            var queue = [];\r\n\r\n            while (processList.length > 0 || queue.length > 0) {\r\n                addToQueue();\r\n                while (queue.length == 0) {\r\n                    time++;\r\n                    addToQueue();\r\n                }\r\n                selectProcessForRR();\r\n            }\r\n\r\n            function addToQueue() {\r\n                for(var i = 0; i < processList.length; i++) {\r\n                    if(processList[i].arrivalTime === time) {\r\n                        var process = {\r\n                            processID: processList[i].processID,\r\n                            arrivalTime: processList[i].arrivalTime,\r\n                            burstTime: processList[i].burstTime\r\n                        }\r\n                        processList.splice(i, 1);\r\n                        queue.push(process);\r\n                    }\r\n                }\r\n            }\r\n            function selectProcessForRR() {\r\n                if (queue.length!=0) {\r\n                    queue.sort(function(a, b){\r\n                        if (a.burstTime > b.burstTime) {\r\n                            return 1;\r\n                        } else {\r\n                            return -1;\r\n                        }\r\n                    });\r\n\r\n                    if (queue[0].burstTime < timeQuantumVal) {\r\n                        process = queue.shift();\r\n                        process.completedTime = time + process.burstTime;\r\n\r\n                        for (var index = 0; index < process.burstTime; index++) {\r\n                            time++;\r\n                            addToQueue();\r\n                        }\r\n                        completedList.push(process);\r\n\r\n                    }\r\n                    else if(queue[0].burstTime == timeQuantumVal){\r\n                        process = queue.shift();\r\n                        process.completedTime = time + timeQuantumVal;\r\n                        completedList.push(process);\r\n\r\n                        for (var index = 0; index < timeQuantumVal; index++) {\r\n                            time++;\r\n                            addToQueue();\r\n                        }\r\n                    }\r\n                    else if(queue[0].burstTime > timeQuantumVal){\r\n                        process = queue[0];\r\n                        queue[0].burstTime = process.burstTime - timeQuantumVal;\r\n\r\n                        for (var index = 0; index < timeQuantumVal; index++) {\r\n                            time++;\r\n                            addToQueue();\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            // Fetch initial table data\r\n            var TableData = [];\r\n            $('#tblProcessList tr').each(function(row, tr) {\r\n                TableData[row] = {\r\n                    \"processID\": parseInt($(tr).find('td:eq(0)').text()),\r\n                    \"arrivalTime\": parseInt($(tr).find('td:eq(1)').text()),\r\n                    \"burstTime\": parseInt($(tr).find('td:eq(2)').text())\r\n                }\r\n            });\r\n\r\n            // Remove table header row\r\n            TableData.splice(0, 1);\r\n\r\n            // Reset burst time from original input table.\r\n            TableData.forEach(pInTable => {\r\n                completedList.forEach(pInCompleted => {\r\n                    if (pInTable.processID==pInCompleted.processID) {\r\n                        pInCompleted.burstTime= pInTable.burstTime;\r\n                        pInCompleted.turnAroundTime = pInCompleted.completedTime - pInCompleted.arrivalTime;\r\n                        pInCompleted.waitingTime = pInCompleted.turnAroundTime - pInCompleted.burstTime;\r\n                    }\r\n                });\r\n            });\r\n\r\n            // Bind table data\r\n            $.each(completedList, function(key, process){\r\n                $('#tblResults > tbody:last-child').append(\r\n                    `<tr>\r\n                        <td id=\"tdProcessID\">${process.processID}</td>\r\n                        <td id=\"tdArrivalTime\">${process.arrivalTime}</td>\r\n                        <td id=\"tdBurstTime\">${process.burstTime}</td>\r\n                        <td id=\"tdBurstTime\">${process.completedTime}</td>\r\n                        <td id=\"tdBurstTime\">${process.waitingTime}</td>\r\n                        <td id=\"tdBurstTime\">${process.turnAroundTime}</td>\r\n                    </tr>`\r\n                );\r\n            });\r\n\r\n            // Get average\r\n            var totalTurnaroundTime = 0;\r\n            var totalWaitingTime = 0;\r\n            var maxCompletedTime = 0;\r\n\r\n            $.each(completedList, function(key, process){\r\n                if (process.completedTime > maxCompletedTime) {\r\n                    maxCompletedTime = process.completedTime;\r\n                }\r\n                totalTurnaroundTime = totalTurnaroundTime + process.turnAroundTime;\r\n                totalWaitingTime = totalWaitingTime + process.waitingTime;\r\n            });\r\n\r\n            $('#avgTurnaroundTime').val( totalTurnaroundTime / completedList.length );\r\n            $('#avgWaitingTime').val( totalWaitingTime / completedList.length );\r\n            $('#throughput').val(completedList.length / maxCompletedTime);\r\n\r\n        }\r\n    }\r\n);\r\n"],"file":"app.dev.js"}