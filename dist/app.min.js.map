{"version":3,"sources":["app.js"],"names":["$","document","ready","hide","on","this","value","show","arrivalTime","processID","addClass","val","burstTime","process","push","parseInt","processList","append","concat","children","selectedAlgo","shortestJobFirst","shortestRemainingTimeFirst","length","selectProcessForCFS","timeQuantumVal","timeQuantum","addToQueue","each","tr","totalCpuTime","find","text","completedList","time","queue","splice","sort","a","b","remainingBurstTime","weight","i","completedTime","Math","min","waitingTime","turnAroundTime","vruntime","totalTurnaroundTime","roundRobin","forEach","round","key","totalWaitingTime","cfs","processToRun","selectProcess","maxCompletedTime","shift","avgTurnaroundTime","avgWaitingTime","selectProcessForSRTF","runSRTF","TableData","pInTable","row","pInCompleted","minVruntime","alert","index","selectProcessForRR"],"mappings":"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","file":"app.min.js","sourcesContent":["$(document).ready(\r\n    function(){\r\n\r\n        $(\".form-group-time-quantum\").hide();\r\n\r\n        // Show hide RR time quantum\r\n        $('#algorithmSelector').on('change', function(){\r\n            if(this.value === 'optRR' || this.value === 'optCFS') {\r\n                $(\".form-group-time-quantum\").show(1000);\r\n            } else {\r\n                $(\".form-group-time-quantum\").hide(1000);\r\n            }\r\n        });\r\n\r\n\r\n        var processList = [];\r\n\r\n        $('#btnAddProcess').on('click', function(){\r\n            var processID = $('#processID');\r\n            var arrivalTime = $('#arrivalTime');\r\n            var burstTime = $('#burstTime');\r\n\r\n            if(processID.val() === '' || arrivalTime.val() === '' || burstTime.val() === '' ){\r\n                processID.addClass('is-invalid');\r\n                arrivalTime.addClass('is-invalid');\r\n                burstTime.addClass('is-invalid');\r\n                return;\r\n            }\r\n\r\n            var process = {\r\n                processID: parseInt(processID.val(), 10),\r\n                arrivalTime: parseInt(arrivalTime.val(), 10),\r\n                burstTime: parseInt(burstTime.val(), 10),\r\n\r\n            }\r\n\r\n            processList.push(process);\r\n\r\n            $('#tblProcessList > tbody:last-child').append(\r\n                `<tr>\r\n                    <td id=\"tdProcessID\">${processID.val()}</td>\r\n                    <td id=\"tdArrivalTime\">${arrivalTime.val()}</td>\r\n                    <td id=\"tdBurstTime\">${burstTime.val()}</td>\r\n\r\n                </tr>`\r\n            );\r\n\r\n            processID.val('');\r\n            arrivalTime.val('');\r\n            burstTime.val('');\r\n\r\n        });\r\n\r\n        $('#btnCalculate').on('click', function(){\r\n\r\n            if (processList.length == 0) {\r\n                alert('Please insert some processes');\r\n                return;\r\n            }\r\n\r\n            var selectedAlgo = $('#algorithmSelector').children('option:selected').val();\r\n            if (selectedAlgo === 'optCFS')\r\n            {\r\n                cfs();\r\n            }\r\n            if (selectedAlgo === 'optSJF') {\r\n                shortestJobFirst();\r\n            }\r\n\r\n            if (selectedAlgo === 'optSRTF') {\r\n                shortestRemainingTimeFirst();\r\n            }\r\n\r\n            if (selectedAlgo === 'optRR') {\r\n                roundRobin();\r\n            }\r\n        });\r\n\r\n        function shortestJobFirst(){\r\n            var completedList = [];\r\n            var time = 0;\r\n            var queue = [];\r\n\r\n            while (processList.length>0 || queue.length>0) {\r\n                addToQueue();\r\n                while (queue.length==0) {\r\n                    time++;\r\n                    addToQueue();\r\n                }\r\n                processToRun = selectProcess();\r\n                for (var i = 0; i < processToRun.burstTime; i++) {\r\n                    time++;\r\n                    addToQueue();\r\n                }\r\n                processToRun.processID = processToRun.processID;\r\n                processToRun.arrivalTime = processToRun.arrivalTime;\r\n                processToRun.burstTime = processToRun.burstTime;\r\n                processToRun.completedTime = time;\r\n                processToRun.turnAroundTime = processToRun.completedTime - processToRun.arrivalTime;\r\n                processToRun.waitingTime = processToRun.turnAroundTime - processToRun.burstTime;\r\n                completedList.push(processToRun);\r\n            }\r\n            function addToQueue() {\r\n                for(var i = 0; i < processList.length; i++) {\r\n                    if(processList[i].arrivalTime === time) {\r\n                        var process = {\r\n                            processID: processList[i].processID,\r\n                            arrivalTime: processList[i].arrivalTime,\r\n                            burstTime: processList[i].burstTime\r\n                        }\r\n                        processList.splice(i, 1);\r\n                        queue.push(process);\r\n                    }\r\n                }\r\n            }\r\n            function selectProcess() {\r\n                if (queue.length!=0) {\r\n                    queue.sort(function(a, b){\r\n                        if (a.burstTime > b.burstTime) {\r\n                            return 1;\r\n                        } else {\r\n                            return -1;\r\n                        }\r\n                    });\r\n                }\r\n                var process = queue.shift();\r\n                return process;\r\n            }\r\n\r\n            // Bind table data\r\n            $.each(completedList, function(key, process){\r\n                $('#tblResults > tbody:last-child').append(\r\n                    `<tr>\r\n                        <td id=\"tdProcessID\">${process.processID}</td>\r\n                        <td id=\"tdArrivalTime\">${process.arrivalTime}</td>\r\n                        <td id=\"tdBurstTime\">${process.burstTime}</td>\r\n                        <td id=\"tdBurstTime\">${process.completedTime}</td>\r\n                        <td id=\"tdBurstTime\">${process.waitingTime}</td>\r\n                        <td id=\"tdBurstTime\">${process.turnAroundTime}</td>\r\n                    </tr>`\r\n                );\r\n            });\r\n\r\n            // Get average\r\n            var avgTurnaroundTime = 0;\r\n            var avgWaitingTime = 0;\r\n            var maxCompletedTime = 0;\r\n            var throughput = 0;\r\n\r\n            $.each(completedList, function(key, process){\r\n                if (process.completedTime > maxCompletedTime) {\r\n                    maxCompletedTime = process.completedTime;\r\n                }\r\n                avgTurnaroundTime = avgTurnaroundTime + process.turnAroundTime;\r\n                avgWaitingTime = avgWaitingTime + process.waitingTime;\r\n            });\r\n\r\n            $('#avgTurnaroundTime').val( avgTurnaroundTime / completedList.length );\r\n            $('#avgWaitingTime').val( avgWaitingTime / completedList.length );\r\n            $('#throughput').val(completedList.length / maxCompletedTime);\r\n        }\r\n\r\n        function shortestRemainingTimeFirst() {\r\n            var completedList = [];\r\n            var time = 0;\r\n            var queue = [];\r\n\r\n            while ( processList.length>0 || queue.length>0 ) {\r\n                addToQueue();\r\n                while (queue.length==0) {\r\n                    time++;\r\n                    addToQueue();\r\n                }\r\n             selectProcessForSRTF();\r\n             runSRTF();\r\n            }\r\n\r\n            function addToQueue() {\r\n                for(var i = 0; i < processList.length; i++) {\r\n                    if(processList[i].arrivalTime === time) {\r\n                        var process = {\r\n                            processID: processList[i].processID,\r\n                            arrivalTime: processList[i].arrivalTime,\r\n                            burstTime: processList[i].burstTime\r\n                        }\r\n                        processList.splice(i, 1);\r\n                        queue.push(process);\r\n                    }\r\n                }\r\n            }\r\n            function selectProcessForSRTF() {\r\n                if (queue.length != 0) {\r\n                    queue.sort(function(a, b){\r\n                        if (a.burstTime > b.burstTime) {\r\n                            return 1;\r\n                        } else {\r\n                            return -1;\r\n                        }\r\n                    });\r\n                    if (queue[0].burstTime == 1) {\r\n                        process = queue.shift();\r\n                        process.completedTime = time + 1;\r\n                        completedList.push(process);\r\n\r\n                    } else if(queue[0].burstTime > 1){\r\n                        process = queue[0];\r\n                        queue[0].burstTime = process.burstTime - 1;\r\n                    }\r\n                }\r\n            }\r\n            function runSRTF() {\r\n                time++;\r\n                addToQueue();\r\n            }\r\n\r\n            // Fetch table data\r\n            var TableData = [];\r\n            $('#tblProcessList tr').each(function(row, tr) {\r\n                TableData[row] = {\r\n                    \"processID\": parseInt($(tr).find('td:eq(0)').text()),\r\n                    \"arrivalTime\": parseInt($(tr).find('td:eq(1)').text()),\r\n                    \"burstTime\": parseInt($(tr).find('td:eq(2)').text())\r\n                }\r\n            });\r\n\r\n            // Remove header row\r\n            TableData.splice(0, 1);\r\n\r\n            // Reset burst time\r\n            TableData.forEach(pInTable => {\r\n                completedList.forEach(pInCompleted => {\r\n                    if (pInTable.processID == pInCompleted.processID) {\r\n                        pInCompleted.burstTime = pInTable.burstTime;\r\n                        pInCompleted.turnAroundTime = pInCompleted.completedTime - pInCompleted.arrivalTime;\r\n                        pInCompleted.waitingTime = pInCompleted.turnAroundTime - pInCompleted.burstTime;\r\n                    }\r\n                });\r\n            });\r\n\r\n            // Bind table data\r\n            $.each(completedList, function(key, process){\r\n                $('#tblResults > tbody:last-child').append(\r\n                    `<tr>\r\n                        <td id=\"tdProcessID\">${process.processID}</td>\r\n                        <td id=\"tdArrivalTime\">${process.arrivalTime}</td>\r\n                        <td id=\"tdBurstTime\">${process.burstTime}</td>\r\n                        <td id=\"tdBurstTime\">${process.completedTime}</td>\r\n                        <td id=\"tdBurstTime\">${process.waitingTime}</td>\r\n                        <td id=\"tdBurstTime\">${process.turnAroundTime}</td>\r\n                    </tr>`\r\n                );\r\n            });\r\n\r\n            // Get average\r\n            var avgTurnaroundTime = 0;\r\n            var avgWaitingTime = 0;\r\n            var maxCompletedTime = 0;\r\n            var throughput = 0;\r\n\r\n            $.each(completedList, function(key, process){\r\n                if (process.completedTime > maxCompletedTime) {\r\n                    maxCompletedTime = process.completedTime;\r\n                }\r\n                avgTurnaroundTime = avgTurnaroundTime + process.turnAroundTime;\r\n                avgWaitingTime = avgWaitingTime + process.waitingTime;\r\n            });\r\n\r\n            $('#avgTurnaroundTime').val( avgTurnaroundTime / completedList.length );\r\n            $('#avgWaitingTime').val( avgWaitingTime / completedList.length );\r\n            $('#throughput').val(completedList.length / maxCompletedTime);\r\n        }\r\n        /////////////////////////////////////////////////////////////\r\n        function cfs() {\r\n            // Fetch time quantum and total available CPU time\r\n            var timeQuantum = $('#timeQuantum');\r\n            var timeQuantumVal = parseInt(timeQuantum.val(), 10);\r\n            if (timeQuantum.val() == '') {\r\n                alert('Please enter time quantum');\r\n                timeQuantum.addClass('is-invalid');\r\n                return;\r\n            }\r\n            var totalCpuTime = 0;\r\n            $('#tblProcessList tr').each(function(row, tr) {\r\n                if (row > 0) {\r\n                    totalCpuTime += parseInt($(tr).find('td:eq(2)').text());\r\n                }\r\n            });\r\n\r\n            // Initialize variables\r\n            var completedList = [];\r\n            var time = 0;\r\n            var queue = [];\r\n            var minVruntime = Infinity;\r\n\r\n            while (processList.length > 0 || queue.length > 0) {\r\n                addToQueue();\r\n                queue.sort(function(a, b) {\r\n                    if (a.arrivalTime > b.arrivalTime) {\r\n                        return 1;\r\n                    } else {\r\n                        return -1;\r\n                    }\r\n                });\r\n                selectProcessForCFS();\r\n            }\r\n\r\n            function addToQueue() {\r\n                for (var i = 0; i < processList.length; i++) {\r\n                    if (processList[i].arrivalTime <= time) {\r\n                        var process = {\r\n                            processID: processList[i].processID,\r\n                            arrivalTime: processList[i].arrivalTime,\r\n                            burstTime: processList[i].burstTime,\r\n                            vruntime: processList[i].vruntime || 0,\r\n                            weight: processList[i].weight || 1\r\n                        };\r\n                        processList.splice(i, 1);\r\n                        queue.push(process);\r\n                    }\r\n                }\r\n            }\r\n\r\n            function selectProcessForCFS() {\r\n                if (queue.length > 0) {\r\n                    var process = queue[0];\r\n                    queue.splice(0, 1);\r\n                    var remainingBurstTime = process.burstTime - timeQuantumVal;\r\n                    process.completedTime = time + Math.min(process.burstTime, timeQuantumVal);\r\n\r\n                    // Update vruntime and weight\r\n                    var delta = process.weight * (time - process.arrivalTime) / process.burstTime;\r\n                    process.vruntime += delta;\r\n                    process.weight *= 2;\r\n\r\n                    // Add to completed list if process has finished\r\n                    if (process.burstTime <= timeQuantumVal) {\r\n                        process.burstTime = 0;\r\n                        completedList.push(process);\r\n                    } else if (remainingBurstTime > 0) {\r\n                        process.burstTime = remainingBurstTime;\r\n                        queue.push(process);\r\n                    }\r\n\r\n                    // Update time\r\n                    time += Math.min(process.burstTime, timeQuantumVal);\r\n\r\n                    // Add new processes to queue\r\n                    addToQueue();\r\n                } else {\r\n                    time++;\r\n                    addToQueue();\r\n                }\r\n                // Check if the total available CPU time has been exceeded\r\n                if (time >= totalCpuTime) {\r\n                    return;\r\n                }\r\n            }\r\n\r\n            // Calculate turnaround time, waiting time, and vruntime for each process\r\n            completedList.forEach(function(process) {\r\n                process.turnAroundTime = process.completedTime - process.arrivalTime;\r\n                process.waitingTime = process.turnAroundTime - process.burstTime;\r\n                process.vruntime = Math.round(process.vruntime);\r\n            });\r\n\r\n            // Bind table data\r\n            $.each(completedList, function(key, process) {\r\n                $('#tblResults > tbody:last-child').append(\r\n                    `<tr>\r\n                        <td id=\"tdProcessID\">${process.processID}</td>\r\n                        <td id=\"tdArrivalTime\">${process.arrivalTime}</td>\r\n                        <td id=\"tdBurstTime\">${process.burstTime}</td>\r\n                        <td id=\"tdBurstTime\">${process.completedTime}</td>\r\n                        <td id=\"tdBurstTime\">${process.waitingTime}</td>\r\n                        <td id=\"tdBurstTime\">${process.turnAroundTime}</td>\r\n                    </tr>`\r\n                );\r\n            });\r\n\r\n            // Calculate and display averages\r\n            var totalTurnaroundTime = 0;\r\n            var totalWaitingTime = 0;\r\n            $.each(completedList, function(key, process) {\r\n                totalTurnaroundTime += process.turnAroundTime;\r\n                totalWaitingTime += process.waitingTime;\r\n            });\r\n            $('#avgTurnaroundTime').val(totalTurnaroundTime / completedList.length);\r\n            $('#avgWaitingTime').val(totalWaitingTime / completedList.length);\r\n            $('#throughput').val(completedList.length / totalCpuTime);\r\n        }\r\n            ///////////////////////////////////////////////////////////////////////////////////////////////////\r\n        function roundRobin() {\r\n            var timeQuantum = $('#timeQuantum');\r\n            var timeQuantumVal= parseInt(timeQuantum.val(), 10);\r\n            if(timeQuantum.val() ==''){\r\n                alert('Please enter time quantum');\r\n                timeQuantum.addClass('is-invalid');\r\n                return;\r\n            }\r\n            var completedList = [];\r\n            var time = 0;\r\n            var queue = [];\r\n\r\n            while (processList.length > 0 || queue.length > 0) {\r\n                addToQueue();\r\n                while (queue.length == 0) {\r\n                    time++;\r\n                    addToQueue();\r\n                }\r\n                selectProcessForRR();\r\n            }\r\n\r\n            function addToQueue() {\r\n                for(var i = 0; i < processList.length; i++) {\r\n                    if(processList[i].arrivalTime === time) {\r\n                        var process = {\r\n                            processID: processList[i].processID,\r\n                            arrivalTime: processList[i].arrivalTime,\r\n                            burstTime: processList[i].burstTime\r\n                        }\r\n                        processList.splice(i, 1);\r\n                        queue.push(process);\r\n                    }\r\n                }\r\n            }\r\n            function selectProcessForRR() {\r\n                if (queue.length!=0) {\r\n                    queue.sort(function(a, b){\r\n                        if (a.burstTime > b.burstTime) {\r\n                            return 1;\r\n                        } else {\r\n                            return -1;\r\n                        }\r\n                    });\r\n\r\n                    if (queue[0].burstTime < timeQuantumVal) {\r\n                        process = queue.shift();\r\n                        process.completedTime = time + process.burstTime;\r\n\r\n                        for (var index = 0; index < process.burstTime; index++) {\r\n                            time++;\r\n                            addToQueue();\r\n                        }\r\n                        completedList.push(process);\r\n\r\n                    }\r\n                    else if(queue[0].burstTime == timeQuantumVal){\r\n                        process = queue.shift();\r\n                        process.completedTime = time + timeQuantumVal;\r\n                        completedList.push(process);\r\n\r\n                        for (var index = 0; index < timeQuantumVal; index++) {\r\n                            time++;\r\n                            addToQueue();\r\n                        }\r\n                    }\r\n                    else if(queue[0].burstTime > timeQuantumVal){\r\n                        process = queue[0];\r\n                        queue[0].burstTime = process.burstTime - timeQuantumVal;\r\n\r\n                        for (var index = 0; index < timeQuantumVal; index++) {\r\n                            time++;\r\n                            addToQueue();\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            // Fetch initial table data\r\n            var TableData = [];\r\n            $('#tblProcessList tr').each(function(row, tr) {\r\n                TableData[row] = {\r\n                    \"processID\": parseInt($(tr).find('td:eq(0)').text()),\r\n                    \"arrivalTime\": parseInt($(tr).find('td:eq(1)').text()),\r\n                    \"burstTime\": parseInt($(tr).find('td:eq(2)').text())\r\n                }\r\n            });\r\n\r\n            // Remove table header row\r\n            TableData.splice(0, 1);\r\n\r\n            // Reset burst time from original input table.\r\n            TableData.forEach(pInTable => {\r\n                completedList.forEach(pInCompleted => {\r\n                    if (pInTable.processID==pInCompleted.processID) {\r\n                        pInCompleted.burstTime= pInTable.burstTime;\r\n                        pInCompleted.turnAroundTime = pInCompleted.completedTime - pInCompleted.arrivalTime;\r\n                        pInCompleted.waitingTime = pInCompleted.turnAroundTime - pInCompleted.burstTime;\r\n                    }\r\n                });\r\n            });\r\n\r\n            // Bind table data\r\n            $.each(completedList, function(key, process){\r\n                $('#tblResults > tbody:last-child').append(\r\n                    `<tr>\r\n                        <td id=\"tdProcessID\">${process.processID}</td>\r\n                        <td id=\"tdArrivalTime\">${process.arrivalTime}</td>\r\n                        <td id=\"tdBurstTime\">${process.burstTime}</td>\r\n                        <td id=\"tdBurstTime\">${process.completedTime}</td>\r\n                        <td id=\"tdBurstTime\">${process.waitingTime}</td>\r\n                        <td id=\"tdBurstTime\">${process.turnAroundTime}</td>\r\n                    </tr>`\r\n                );\r\n            });\r\n\r\n            // Get average\r\n            var totalTurnaroundTime = 0;\r\n            var totalWaitingTime = 0;\r\n            var maxCompletedTime = 0;\r\n\r\n            $.each(completedList, function(key, process){\r\n                if (process.completedTime > maxCompletedTime) {\r\n                    maxCompletedTime = process.completedTime;\r\n                }\r\n                totalTurnaroundTime = totalTurnaroundTime + process.turnAroundTime;\r\n                totalWaitingTime = totalWaitingTime + process.waitingTime;\r\n            });\r\n\r\n            $('#avgTurnaroundTime').val( totalTurnaroundTime / completedList.length );\r\n            $('#avgWaitingTime').val( totalWaitingTime / completedList.length );\r\n            $('#throughput').val(completedList.length / maxCompletedTime);\r\n\r\n        }\r\n    }\r\n);\r\n"]}